#include "U8glib.h"
#include<OneButton.h>
OneButton button(11,true,true);
U8GLIB_SSD1306_128X64 u8g(U8G_I2C_OPT_NONE);
#define BUF_SIZE 64
float voltageBuffer[BUF_SIZE];
int bufferIndex = 0;
const int X_ORIGIN = 64;
const int Y_ORIGIN = 48;
int currentChannel = 0; 
int analogPins[3] = {A0, A1, A2}; 
bool buttonPressed = false;
void onClick(){
  currentChannel = (currentChannel + 1) % 3;
}
void setup() {
  button.attachClick(onClick); 
  for(int i=0; i<BUF_SIZE; i++) {
    voltageBuffer[i] = 2.5; 
  }
}
void drawOscilloscope() {
  u8g.firstPage();
  do {
    u8g.setColorIndex(1);
    u8g.setFont(u8g_font_6x10);
    u8g.drawStr(35, 10, "Oscilloscope");
    drawAxesWithArrows();
    u8g.drawHLine(X_ORIGIN, Y_ORIGIN, 64);
    u8g.drawVLine(X_ORIGIN, Y_ORIGIN-20, 40);
    for(int i=1; i<BUF_SIZE; i++) {
      int prevX = X_ORIGIN + i-1;
      int currX = X_ORIGIN + i;
      int prevY = map(voltageBuffer[i-1], 0, 5, Y_ORIGIN+20, Y_ORIGIN-20);
      int currY = map(voltageBuffer[i], 0, 5, Y_ORIGIN+20, Y_ORIGIN-20);
      u8g.drawLine(prevX, prevY, currX, currY);
    }
    u8g.setFont(u8g_font_5x8);
    u8g.setPrintPos(5, 63);
    u8g.print("A");
    u8g.print(currentChannel);
  } while(u8g.nextPage());
}

void loop() {
  button.tick();
  voltageBuffer[bufferIndex] = analogRead(analogPins[currentChannel]) * (5.0 / 1023.0);
  bufferIndex = (bufferIndex + 1) % BUF_SIZE;
  drawOscilloscope();
  delay(50);
}
void drawAxesWithArrows() {
  u8g.drawHLine(X_ORIGIN, Y_ORIGIN, 64); 
  u8g.drawLine(X_ORIGIN+64, Y_ORIGIN, X_ORIGIN+60, Y_ORIGIN-3); 
  u8g.drawLine(X_ORIGIN+64, Y_ORIGIN, X_ORIGIN+60, Y_ORIGIN+3); 
  u8g.drawVLine(X_ORIGIN, Y_ORIGIN-20, 40); 
  u8g.drawLine(X_ORIGIN, Y_ORIGIN-20, X_ORIGIN-3, Y_ORIGIN-16); 
  u8g.drawLine(X_ORIGIN, Y_ORIGIN-20, X_ORIGIN+3, Y_ORIGIN-16); 
  u8g.drawPixel(X_ORIGIN, Y_ORIGIN);
}
